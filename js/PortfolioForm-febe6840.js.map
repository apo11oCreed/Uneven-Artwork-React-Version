{"version":3,"mappings":"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","names":["Artwork","React","lazy","ArtworkContainer","imageCollection","map","item","index","Suspense","_jsx","Loader","PortfolioForm","imagesSelector","useSelector","state","portfolio","images","dispatch","useDispatch","filterSelector","useRef","portfolioTitle","contentful","import","spaceId","VITE_CONTENTFUL_SPACE_ID","accessToken","VITE_CONTENTFUL_DELIVERY_API_ACCESS_TOKEN","query","tagFilter","setTagFilter","useState","isLoading","setIsLoading","imagesQuery","assetsQuery","useEffect","fetch","method","headers","Authorization","body","JSON","stringify","then","res","json","data","errors","console","error","items","imageUrls","image","url","assetCollection","tags","contentfulMetadata","name","filterImages","Set","cacheImages","current","addEventListener","filter","removeEventListener","imgArray","set","promises","src","Promise","resolve","reject","img","Image","onload","onerror","all","filteredArray","e","target","value","log","undefined","innerHTML","changeCategory","_jsxs","tag"],"sources":["../../src/features/portfolio/PortfolioContainer.jsx","../../src/app/routes/portfolio/PortfolioForm.jsx"],"sourcesContent":["import React, { Suspense } from 'react';\nimport Loader from '../../app/components/common/Loader';\nconst Artwork = React.lazy(()=>import('./Portfolio'));\n\nexport default function ArtworkContainer({ imageCollection }) {\n\n\treturn (\n\t\t\t<ul className='tw-flex tw-flex-wrap tw-justify-between'>\n\t\t\t\t{imageCollection.map((item, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Suspense\n\t\t\t\t\t\t\tfallback={<li><Loader /></li>} key={index}>\n\t\t\t\t\t\t\t<Artwork item={item} index={index} />\n\t\t\t\t\t\t</Suspense>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</ul>\n\t);\n}\n","import React, { useState, useEffect, useRef } from 'react';\nimport ArtworkContainer from '../../../features/portfolio/PortfolioContainer';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterImages, changeCategory } from '../../../app/store/slices/portfolioSlice';\n\nexport default function PortfolioForm() {\n\tconst imagesSelector = useSelector((state) => state.portfolio.images);\n\tconst dispatch = useDispatch();\n\n\tconst filterSelector = useRef();\n\tconst portfolioTitle = useRef();\n\n\tconst contentful = import.meta.env;\n\tconst spaceId = contentful.VITE_CONTENTFUL_SPACE_ID;\n\tconst accessToken = contentful.VITE_CONTENTFUL_DELIVERY_API_ACCESS_TOKEN;\n\tconst query = `\n\tquery imagesAssets {\n\t\timageCollection{\n\t\t\titems{\n\t\t\t\timage{\n\t\t\t\t\ttitle\n\t\t\t\t\tdescription\n\t\t\t\t\turl\n\t\t\t\t\tcontentfulMetadata{\n\t\t\t\t\t\ttags{\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tassetCollection(where:{\n\t\t\tcontentfulMetadata:{\n\t\t\t  tags_exists:true\n\t\t\t}\n\t\t  }){\n\t\t\titems{\n\t\t\t\tcontentfulMetadata{\n\t\t\t\t\ttags{\n\t\t\t\t\t\tname\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t`;\n\n\tconst [tagFilter, setTagFilter] = useState([]);\n\tconst [isLoading, setIsLoading] = useState(true);\n\n\tlet imagesQuery = [],\n\t\tassetsQuery = [];\n\n\tuseEffect(() => {\n\t\twindow.fetch(`https://graphql.contentful.com/content/v1/spaces/${spaceId}/environments/master`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'content-type': 'application/json',\n\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tquery,\n\t\t\t}),\n\t\t})\n\t\t\t.then((res) => res.json())\n\t\t\t.then(({ data, errors }) => {\n\t\t\t\tif (errors) {\n\t\t\t\t\tconsole.error(errors);\n\t\t\t\t}\n\n\t\t\t\timagesQuery = data.imageCollection.items;\n\t\t\t\tconst imageUrls = imagesQuery.map((item) => {\n\t\t\t\t\treturn item.image.url;\n\t\t\t\t});\n\n\t\t\t\tassetsQuery = data.assetCollection.items;\n\t\t\t\tconst tags = assetsQuery.map((item) => {\n\t\t\t\t\t\n\t\t\t\t\treturn item.contentfulMetadata.tags[0].name;\n\t\t\t\t});\n\n\t\t\t\t// Update images data array in redux store\n\t\t\t\tdispatch(filterImages(imagesQuery));\n\n\t\t\t\t// Initial filter options\n\t\t\t\tsetTagFilter([...new Set(tags)]);\n\n\t\t\t\t// Precache images\n\t\t\t\tcacheImages(imageUrls, setIsLoading);\n\n\t\t\t});\n\n\t\tif (filterSelector && filterSelector.current) {\n\t\t\tfilterSelector.current.addEventListener('change', filter);\n\t\t} else {\n\t\t\tfilterSelector.current.removeEventListener('change', filter);\n\t\t}\n\t}, []);\n\n\tconst cacheImages = async (imgArray, set) => {\n\t\tconst promises = await imgArray.map((src) => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tconst img = new Image();\n\n\t\t\t\timg.src = src;\n\t\t\t\timg.onload = resolve();\n\t\t\t\timg.onerror = reject();\n\t\t\t});\n\t\t});\n\n\t\tawait Promise.all(promises);\n\n\t\tset(false);\n\t};\n\n\t// filterSelector should be converted to feature and added to Store to render based on the state of the Select drop down\n\n\tconst filter = (e) => {\n\t\tlet filteredArray = [];\n\n\t\tif (e.target.value == 'all') {\n\t\t\tfilteredArray = imagesQuery;\n\t\t\tconsole.log(filteredArray);\n\t\t} else {\n\t\t\tfilteredArray = imagesQuery.filter((item) => {\n\t\t\t\tif(item.image.contentfulMetadata.tags[0].name==undefined){\n\t\t\t\t\tconsole.log(item.image.contentfulMetadata.tags[0] + ' image is missing a tag.');\n\t\t\t\t} else {\n\t\t\t\t\treturn item.image.contentfulMetadata.tags[0].name == e.target.value;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tportfolioTitle.current.innerHTML = `${e.target.value} Samples`;\n\n\t\t// build dispatch action\n\t\tdispatch(filterImages(filteredArray));\n\t\tdispatch(changeCategory(filterSelector.current.value));\n\t};\n\n\treturn (\n\t\t<section className='portfolio'>\n\t\t\t<form>\n\t\t\t\t<legend>\n\t\t\t\t\t<h2 ref={portfolioTitle} className='tw-font-bold tw-capitalize tw-text-center tw-mb-[2rem]'>\n\t\t\t\t\t\tAll Samples\n\t\t\t\t\t</h2>\n\t\t\t\t</legend>\n\t\t\t\t<label htmlFor='tagName'>Select Category</label>\n\t\t\t\t<select name='tag' id='tagName' ref={filterSelector}>\n\t\t\t\t\t<option value='all'>All</option>\n\t\t\t\t\t{tagFilter.map((tag, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<option value={tag} key={index}>\n\t\t\t\t\t\t\t\t{tag}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</select>\n\t\t\t</form>\n\t\t\t<ArtworkContainer imageCollection={imagesSelector} />\n\t\t</section>\n\t);\n}\n"],"file":"js/PortfolioForm-febe6840.js"}